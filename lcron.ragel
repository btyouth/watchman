/*
 * Copyright (c) 2011 Kamil Klimkiewicz
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#include <string.h>
#include <stdio.h>
#include <time.h>

#include "lua.h"
#include "lualib.h"
#include "lauxlib.h"

#define MAX_LEN 100

#define DAYS_OF_MONTH_START 1
#define DAYS_OF_MONTH_END 31
#define MONTHS_START 1
#define MONTHS_END 12
#define DAYS_OF_WEEK_START 1
#define YEARS_START 1970
#define TM_YEAR_START 1900

/* Remember about Unix Millenium Bug; mktime() will simply return -1 for dates
 * later than 2038 but we will avoid a couple of iterations. */
#if __WORDSIZE > 32
#define YEARS_END 2099
#else
#define YEARS_END 2037
#endif

#define SECONDS_LEN 60
#define MINUTES_LEN 60
#define HOURS_LEN 24
#define DAYS_OF_MONTH_LEN 31
#define MONTHS_LEN 12
#define DAYS_OF_WEEK_LEN 7
#define YEARS_LEN (YEARS_END - YEARS_START + 1)
#define NUMBER_OF_WEEKS 5

#define SUNDAY 0
#define MONDAY 1
#define FRIDAY 5
#define SATURDAY 6

#define MARK_NORMAL 1
#define MARK_WEEKDAY 2
#define MARK_1_IN_MONTH 4
#define MARK_2_IN_MONTH 8
#define MARK_3_IN_MONTH 16
#define MARK_4_IN_MONTH 32
#define MARK_5_IN_MONTH 64
#define MARK_L_IN_MONTH 128

#define call_l_next(literal) \
    time_t t = luaL_optint(L, 2, time(NULL)); \
    lua_pop(L, lua_gettop(L)); \
    lua_pushliteral(L, literal); \
    lua_pushinteger(L, t); \
    return l_next(L)

%%{
    machine crontab;

    # Actions
    action number_start {
        token_start = p;
    }

    action current_seconds {
        current = seconds;
        current_len = SECONDS_LEN;
        current_offset = 0;
    }

    action current_minutes {
        current = minutes;
        current_len = MINUTES_LEN;
        current_offset = 0;
    }

    action current_hours {
        current = hours;
        current_len = HOURS_LEN;
        current_offset = 0;
    }

    action current_days_of_month {
        current = days_of_month;
        current_len = DAYS_OF_MONTH_LEN;
        current_offset = DAYS_OF_MONTH_START;
    }

    action current_months {
        current = months;
        current_len = MONTHS_LEN;
        current_offset = MONTHS_START;
    }

    action current_days_of_week {
        current = days_of_week;
        current_len = DAYS_OF_WEEK_LEN;
        current_offset = DAYS_OF_WEEK_START;
    }

    action current_years {
        current = years;
        current_len = YEARS_LEN;
        current_offset = YEARS_START;
        for (i=0; i<YEARS_LEN; i++) {
            years[i] = 0;
        }
    }

    action set_current {
        current[atoi(token_start) - current_offset] |= MARK_NORMAL;
    }

    action set_all {
        for (i = 0; i < current_len; i++) {
            current[i] |= MARK_NORMAL;
        }
    }

    action range_start {
        range_start = atoi(token_start) - current_offset;
    }

    action range_end {
        range_end = atoi(token_start) - current_offset;
        if (range_end <= range_start) {
            lua_pushinteger(L, -1);
            return 1;
        }
    }

    action set_range {
        for (i=range_start; i<range_end; i++) {
            current[i] |= MARK_NORMAL;
        }
    }

    action increment_start {
        increment_start = atoi(token_start) - current_offset;
    }

    action increment_asterisk_start {
        increment_start = 0;
    }

    action increment_interval {
        increment_interval = atoi(token_start);
    }

    action set_increment {
        while (increment_start < current_len) {
            current[increment_start] |= MARK_NORMAL;
            increment_start += increment_interval;
        }
    }

    action set_last_day_of_month {
        current[DAYS_OF_MONTH_LEN] |= MARK_NORMAL;
    }

    action set_weekday_of_month {
        current[atoi(token_start) - current_offset] |= MARK_WEEKDAY;
    }

    action numbered_day {
        numbered_day = atoi(token_start) - DAYS_OF_WEEK_START;
    }

    action numbered_week {
        numbered_week = atoi(token_start) - DAYS_OF_WEEK_START;
    }

    action set_numbered_day_of_week {
        days_of_week[numbered_day] |= MARK_1_IN_MONTH << numbered_week;
    }

    action set_last_day_of_week {
        days_of_week[numbered_day] |= MARK_L_IN_MONTH;
    }


    # Definitions
    asterisk = '*';

    increment_interval = '/' (digit+ > number_start % increment_interval);

    # Seconds
    seconds_literal = (('0' .. '9') | ('1' .. '5' . '0' .. '9')) > number_start;
    seconds_range = (seconds_literal % range_start) '-' (seconds_literal % range_end);
    seconds_increment = (
            (seconds_literal % increment_start
             | asterisk % increment_asterisk_start)
            increment_interval);
    seconds = seconds_literal % set_current
        | seconds_range % set_range
        | asterisk % set_all
        | seconds_increment % set_increment;
    seconds_no_action = seconds (',' seconds)*;
    seconds_list = seconds_no_action > current_seconds;

    # Minutes
    minutes = seconds_no_action > current_minutes;

    # Hours
    hours_literal = (('0' .. '9') | ('1' . '0' .. '9') | ('2' . '0' .. '3')) > number_start;
    hours_range = ((hours_literal % range_start) '-' (hours_literal % range_end));
    hours_increment = (
            (hours_literal % increment_start
             | asterisk % increment_asterisk_start)
            increment_interval) % set_increment;
    hours = hours_literal % set_current
        | hours_range % set_range
        | asterisk % set_all
        | hours_increment;
    hours_list = (hours (',' hours)*) > current_hours;

    # Days of month
    day_of_month_literal = (
            ('1' .. '9') | ('1' .. '2' . '0' .. '9') | ('3' . '0' .. '1')
            ) > number_start;
    day_of_month_last = 'L';
    day_of_month_weekday = (day_of_month_literal | day_of_month_last) 'W';
    day_of_month_range = day_of_month_literal % range_start '-' day_of_month_literal % range_end;
    day_of_month_increment = (
            day_of_month_literal % increment_start
            | asterisk % increment_asterisk_start) increment_interval;
    day_of_month = day_of_month_literal % set_current
        | day_of_month_last % set_last_day_of_month
        | day_of_month_weekday % set_weekday_of_month
        | day_of_month_range % set_range
        | asterisk % set_all
        | day_of_month_increment % set_increment;
    day_of_month_list = (day_of_month (',' day_of_month)*) > current_days_of_month;

    # Months
    month_string = (
        # if we get a month in string format simply overwrite it with
        # corresponding numeric value
          'JAN'i %{*token_start = '1';}
        | 'FEB'i %{*token_start = '2';}
        | 'MAR'i %{*token_start = '3';}
        | 'APR'i %{*token_start = '4';}
        | 'MAY'i %{*token_start = '5';}
        | 'JUN'i %{*token_start = '6';}
        | 'JUL'i %{*token_start = '7';}
        | 'AUG'i %{*token_start = '8';}
        | 'SEP'i %{*token_start = '9';}
        | 'OCT'i %{*token_start = '1'; *(token_start + 1) = '0';}
        | 'NOV'i %{*token_start = '1'; *(token_start + 1) = '1';}
        | 'DEC'i %{*token_start = '1'; *(token_start + 1) = '2';}
        ) > number_start;
    month_literal = (('1' .. '9') | ('1' . '0' .. '2') | month_string) > number_start;
    month_range = month_literal % range_start '-' month_literal % range_end;
    month_increment = (
            (month_literal % increment_start | asterisk % increment_asterisk_start)
            increment_interval);
    month = month_literal % set_current
        | month_range % set_range
        | asterisk % set_all
        | month_increment % set_increment;
    month_list = (month (',' month)*) > current_months;

    # Days of week
    day_of_week_string =
        # as in month_string section
          'SUN'i %{*token_start = '1';}
        | 'MON'i %{*token_start = '2';}
        | 'TUE'i %{*token_start = '3';}
        | 'WED'i %{*token_start = '4';}
        | 'THU'i %{*token_start = '5';}
        | 'FRI'i %{*token_start = '6';}
        | 'SAT'i %{*token_start = '7';}
        | 'L' %{*token_start = '1';};
    day_of_week_literal = ('1' .. '7' | day_of_week_string) > number_start;
    day_of_week_last = day_of_week_literal % numbered_day . 'L';
    day_of_week_pound = '#' . ('1' .. '5' > number_start % numbered_week);
    day_of_week_numbered = day_of_week_literal % numbered_day . day_of_week_pound;
    day_of_week_range = day_of_week_literal % range_start '-' day_of_week_literal % range_end;
    day_of_week_increment = (
            day_of_week_literal % increment_start
            | asterisk % increment_asterisk_start) increment_interval;
    day_of_week = day_of_week_literal % set_current
        | day_of_week_last % set_last_day_of_week
        | day_of_week_numbered % set_numbered_day_of_week
        | day_of_week_range % set_range
        | asterisk % set_all
        | day_of_week_increment % set_increment;
    day_of_week_list = (day_of_week (',' day_of_week)*) > current_days_of_week;

    year_literal = (
            ('19' . '7' .. '9' . '0' .. '9')
            | ('20' . ('0' .. '9'){2})
            ) > number_start;
    year_range = year_literal % range_start '-' year_literal % range_end;
    year_increment = (
            year_literal  % increment_start
            | asterisk % increment_asterisk_start) increment_interval;
    year = year_literal % set_current
        | year_range % set_range
        | asterisk % set_all
        | year_increment % set_increment;
    year_list = (year (',' year)*) > current_years;

    special = 
          ('@yearly' | '@annually') %{call_l_next("0 0 0 1 1 ?");}
        | '@monthly' %{call_l_next("0 0 0 1 * ?");}
        | '@weekly' %{call_l_next("0 0 0 ? * 2");}
        | ('@daily' | '@midnight') %{call_l_next("0 0 0 * * ?");}
        | '@hourly' %{call_l_next("0 0 * * * ?");};

    day_of_month_specified = (
            seconds_list space+
            minutes space+
            hours_list space+
            day_of_month_list space+
            month_list space+
            ('?' > current_days_of_week % set_all)
            (space+ year_list)?);

    day_of_week_specified = (
            seconds_list space+
            minutes space+
            hours_list space+
            ('?' > current_days_of_month % set_all) space+
            month_list space+
            day_of_week_list
            (space+ year_list)?);

    main := (day_of_month_specified | day_of_week_specified | special) %/{res = 1;};
}%%

%% write data;

static inline void inc_year(struct tm *broken_time) {
    broken_time->tm_mon = 0;
    broken_time->tm_mday = 1;
    broken_time->tm_hour = 0;
    broken_time->tm_min = 0;
    broken_time->tm_sec = 0;
}

static inline void inc_month(struct tm *broken_time) {
    broken_time->tm_mday = 1;
    broken_time->tm_hour = 0;
    broken_time->tm_min = 0;
    broken_time->tm_sec = 0;
}

static inline void inc_mday(struct tm *broken_time) {
    broken_time->tm_hour = 0;
    broken_time->tm_min = 0;
    broken_time->tm_sec = 0;
}

static inline void inc_hour(struct tm *broken_time) {
    broken_time->tm_min = 0;
    broken_time->tm_sec = 0;
}

static inline void inc_min(struct tm *broken_time) {
    broken_time->tm_sec = 0;
}

static inline void next_mday(struct tm *broken_time) {
    broken_time->tm_mday++;
    broken_time->tm_isdst = -1;
    mktime(broken_time);
}

static inline void copy_time(struct tm *src, struct tm *dst) {
    dst->tm_year = src->tm_year;
    dst->tm_mon = src->tm_mon;
    dst->tm_mday = src->tm_mday;
    dst->tm_hour = src->tm_hour;
    dst->tm_min = src->tm_min;
    dst->tm_sec = src->tm_sec;
    dst->tm_wday = src->tm_wday;
    dst->tm_isdst = -1;
}

static int is_last_day_of_month(struct tm *src_time) {
    struct tm broken_time;

    if (src_time->tm_mday < 28) {
        return 0;
    }

    copy_time(src_time, &broken_time);

    int day = broken_time.tm_mday;
    int month = broken_time.tm_mon;
    int last_day = day;

    while (broken_time.tm_mon == month) {
        last_day = broken_time.tm_mday;
        next_mday(&broken_time);
    }

    return last_day == day;
}

static inline int is_closest_weekday(struct tm *src_time, short days_of_month[]) {
    int i, j;
    int day, month;
    struct tm broken_time;

    day = src_time->tm_mday;
    month = src_time->tm_mon;

    if (src_time->tm_wday != MONDAY && src_time->tm_wday != FRIDAY) {
        return 0;
    }

    copy_time(src_time, &broken_time);

    if (broken_time.tm_wday == MONDAY && day > 1) {
        if (day == 3) {
            return days_of_month[0] & MARK_WEEKDAY || days_of_month[1] & MARK_WEEKDAY;
        } else {
            return days_of_month[day - DAYS_OF_MONTH_START - 1] & MARK_WEEKDAY;
        }
    } else if (broken_time.tm_wday == FRIDAY) {
        /* Look at the following Saturday */
        next_mday(&broken_time);

        if (broken_time.tm_mon != month) {
            return 0;
        }

        if (days_of_month[day - DAYS_OF_MONTH_START + 1] & MARK_WEEKDAY) {
            return 1;
        }

        /* We also have to check the situation when the last day of the month is
         * Sunday
         */
        next_mday(&broken_time);

        return broken_time.tm_mon == month &&
            days_of_month[day - DAYS_OF_MONTH_START + 2] & MARK_WEEKDAY &&
            is_last_day_of_month(&broken_time);
    }
}

static inline int is_numbered_week_day(struct tm *src_time, short days_of_week[]) {
    struct tm broken_time;
    int wday = src_time->tm_wday;
    short day_marks = days_of_week[wday];
    int result = 0;
    int day = src_time->tm_mday;
    int month = src_time->tm_mon;

    if (!day_marks) {
        return 0;
    }

    copy_time(src_time, &broken_time);

    if (day_marks & MARK_L_IN_MONTH) {
        result = 1;
        next_mday(&broken_time);

        while (broken_time.tm_mon == month) {
            if (broken_time.tm_wday == wday) {
                result = 0;
                break;
            }
            next_mday(&broken_time);
        }
    }

    if (!result && day_marks >= MARK_1_IN_MONTH && day_marks < MARK_L_IN_MONTH) {
        int i, current_week;

        for (i=1; i<=7; i++) {
            broken_time.tm_mday = i;
            broken_time.tm_mon = month;
            mktime(&broken_time);
            if (broken_time.tm_wday == wday) {
                break;
            }
        }

        current_week = (day - i) / 7;
        result = day_marks & (MARK_1_IN_MONTH << current_week);
    }

    return result;
}

static int l_next(lua_State *L) {
    int i;
    int cs, res = 0;

    /* Variables used within Ragel action blocks */
    int range_start, range_end;
    int increment_start, increment_interval;
    int numbered_day, numbered_week;
    short *current;
    int current_len, current_offset;

    char expression[MAX_LEN];
    int expression_len;
    time_t current_time, time_result;
    struct tm *current_time_tm;
    struct tm broken_time;

    expression_len = lua_objlen(L, 1);

    if (expression_len >= MAX_LEN) {
        lua_pushinteger(L, -1);
        return 1;
    }

    /* We're modifing the string in-place so let's make a copy */
    strcpy(expression, luaL_checkstring(L, 1));

    /* Initialize Ragel variables */
    char *p = expression;
    char *pe = p + expression_len;
    char *eof = pe;
    char *token_start = p;

    short seconds[SECONDS_LEN] = {0};
    short minutes[MINUTES_LEN] = {0};
    short hours[HOURS_LEN] = {0};
    short days_of_month[DAYS_OF_MONTH_LEN + 1] = {0};
    short months[MONTHS_LEN] = {0};
    short days_of_week[DAYS_OF_WEEK_LEN] = {0};
    short years[YEARS_LEN] = {0};
    short second, minute, hour, day_of_month, month, day_of_week, year;

    /* Because year is optional we set all items to 1 initially */
    for (i=0; i<YEARS_LEN; i++) {
        years[i] = 1;
    }

    %% write init;
    %% write exec;

    /* The parser sets res to 1 on success */
    if (res != 1) {
        lua_pushinteger(L, -1);
        return 1;
    }

    current_time = (time_t) luaL_optint(L, 2, time(NULL));
    current_time++;
    current_time_tm = localtime(&current_time);

    for (year=current_time_tm->tm_year + TM_YEAR_START; year<=YEARS_END; year++, inc_year(current_time_tm)) {
        if (!years[year - YEARS_START]) {
            continue;
        }

        for (month=current_time_tm->tm_mon; month<=MONTHS_END; month++, inc_month(current_time_tm)) {
            if (!months[month]) {
                continue;
            }

            for (day_of_month=current_time_tm->tm_mday; day_of_month<=DAYS_OF_MONTH_END; day_of_month++, inc_mday(current_time_tm)) {
                /* Check if the date is valid */
                broken_time.tm_year = year - TM_YEAR_START;
                broken_time.tm_mon = month;
                broken_time.tm_mday = day_of_month;
                broken_time.tm_hour = 0;
                broken_time.tm_min = 0;
                broken_time.tm_sec = 0;
                broken_time.tm_isdst = -1;
                time_result = mktime(&broken_time);

                if (time_result == (time_t)(-1) || broken_time.tm_mon != month) {
                    continue;
                }

                if (!(days_of_week[broken_time.tm_wday] & MARK_NORMAL)) {
                    if (!is_numbered_week_day(&broken_time, days_of_week)) {
                        continue;
                    }
                }

                if (!days_of_month[day_of_month - DAYS_OF_MONTH_START]) {
                    /* Check if 'L' was used and we're at the last day of month */
                    if (!days_of_month[DAYS_OF_MONTH_LEN] || !is_last_day_of_month(&broken_time)) {
                        if (!is_closest_weekday(&broken_time, days_of_month)) {
                            continue;
                        }
                    }
                }

                for (hour=current_time_tm->tm_hour; hour<HOURS_LEN; hour++, inc_hour(current_time_tm)) {
                    if (!hours[hour]) {
                        continue;
                    }

                    for (minute=current_time_tm->tm_min; minute<MINUTES_LEN; minute++, inc_min(current_time_tm)) {
                        if (!minutes[minute]) {
                            continue;
                        }

                        for (second=current_time_tm->tm_sec; second<SECONDS_LEN; second++) {
                            if (!seconds[second]) {
                                continue;
                            }

                            /* Got it! */
                            broken_time.tm_year = year - TM_YEAR_START;
                            broken_time.tm_mon = month;
                            broken_time.tm_mday = day_of_month;
                            broken_time.tm_hour = hour;
                            broken_time.tm_min = minute;
                            broken_time.tm_sec = second;
                            broken_time.tm_isdst = -1;
                            time_result = mktime(&broken_time);

                            lua_pushinteger(L, difftime(time_result, current_time-1));
                            return 1;
                        }
                    }
                }
            }
        }
    }

    lua_pushinteger(L, 0);
    return 1;
}

static const luaL_reg R[] = {
    {"next", l_next},
    {NULL, NULL},
};

LUALIB_API int luaopen_cron (lua_State *L) {
    luaL_register(L, "cron", R);

    lua_pushliteral(L, "MAX_YEAR");
    lua_pushnumber(L, YEARS_END);
    lua_settable(L, -3);

    return 1;
}

/* vim: set ft=c: */
